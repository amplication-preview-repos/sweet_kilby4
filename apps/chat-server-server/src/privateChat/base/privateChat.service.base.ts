/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PrivateChat as PrismaPrivateChat,
  Message as PrismaMessage,
} from "@prisma/client";

export class PrivateChatServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PrivateChatCountArgs, "select">
  ): Promise<number> {
    return this.prisma.privateChat.count(args);
  }

  async privateChats<T extends Prisma.PrivateChatFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrivateChatFindManyArgs>
  ): Promise<PrismaPrivateChat[]> {
    return this.prisma.privateChat.findMany<Prisma.PrivateChatFindManyArgs>(
      args
    );
  }
  async privateChat<T extends Prisma.PrivateChatFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrivateChatFindUniqueArgs>
  ): Promise<PrismaPrivateChat | null> {
    return this.prisma.privateChat.findUnique(args);
  }
  async createPrivateChat<T extends Prisma.PrivateChatCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrivateChatCreateArgs>
  ): Promise<PrismaPrivateChat> {
    return this.prisma.privateChat.create<T>(args);
  }
  async updatePrivateChat<T extends Prisma.PrivateChatUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrivateChatUpdateArgs>
  ): Promise<PrismaPrivateChat> {
    return this.prisma.privateChat.update<T>(args);
  }
  async deletePrivateChat<T extends Prisma.PrivateChatDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.PrivateChatDeleteArgs>
  ): Promise<PrismaPrivateChat> {
    return this.prisma.privateChat.delete(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.privateChat
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }
}
